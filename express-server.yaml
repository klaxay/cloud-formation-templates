AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for EC2 instance running Express server'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair
  VPC:
    Description: VPC where the EC2 instance will be launched
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: Subnet where the EC2 instance will be launched
    Type: AWS::EC2::Subnet::Id

Resources:
  ExpressServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  ExpressServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  ExpressServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ExpressServerRole

  ExpressServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-0aa7d40eeae50c9a9  # Amazon Linux 2 AMI in us-east-1
      KeyName: !Ref KeyName
      SubnetId: !Ref Subnet
      SecurityGroupIds:
        - !Ref ExpressServerSecurityGroup
      IamInstanceProfile: !Ref ExpressServerInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update system packages
          yum update -y
          
          # Install Node.js
          curl -sL https://rpm.nodesource.com/setup_16.x | bash -
          yum install -y nodejs
          
          # Create application directory
          mkdir -p /app
          cd /app
          
          # Create package.json
          cat > package.json << 'EOF'
          {
            "name": "express-server",
            "version": "1.0.0",
            "main": "app.js",
            "dependencies": {
              "express": "^4.17.1"
            }
          }
          EOF
          
          # Create app.js
          cat > app.js << 'EOF'
          const express = require('express');
          const app = express();
          const port = 3000;
          
          app.get('/', (req, res) => {
            res.send('Hello from AWS EC2!');
          });
          
          app.listen(port, () => {
            console.log(`Express server listening at http://localhost:${port}`);
          });
          EOF
          
          # Install dependencies
          npm install
          
          # Create systemd service file
          cat > /etc/systemd/system/express-server.service << 'EOF'
          [Unit]
          Description=Express Server
          After=network.target
          
          [Service]
          Type=simple
          User=root
          WorkingDirectory=/app
          ExecStart=/usr/bin/node app.js
          Restart=on-failure
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Start the service
          systemctl enable express-server
          systemctl start express-server

Outputs:
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt ExpressServer.PublicIp
  PublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt ExpressServer.PublicDnsName
  ExpressServerURL:
    Description: URL for the Express server
    Value: !Sub http://${ExpressServer.PublicDnsName}:3000